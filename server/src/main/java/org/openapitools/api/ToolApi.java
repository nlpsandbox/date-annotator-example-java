/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.Tool;
import org.openapitools.model.ToolDependencies;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-02-12T21:49:56.981797-08:00[America/Los_Angeles]")
@Validated
@Api(value = "tool", description = "the tool API")
public interface ToolApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /tool : Get tool information
     * Get information about the tool
     *
     * @return Success (status code 200)
     *         or The specified resource was not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @ApiOperation(value = "Get tool information", nickname = "getTool", notes = "Get information about the tool", response = Tool.class, tags={ "Tool", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Tool.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class),
        @ApiResponse(code = 500, message = "The request cannot be fulfilled due to an unexpected server error", response = Error.class) })
    @GetMapping(
        value = "/tool",
        produces = { "application/json" }
    )
    default ResponseEntity<Tool> getTool() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"awesome-nlp-tool\", \"version\" : \"1.0.6\", \"license\" : \"apache-2.0\", \"repository\" : \"github:awesome-org/awesome-nlp-tool\", \"description\" : \"An awesome NLP Tool that takes as input X and outputs Y.\", \"author\" : \"Awesome Team\", \"authorEmail\" : \"author@example.com\", \"url\" : \"https://example.com\", \"toolType\" : \"nlpsandbox:date-annotator\", \"toolApiVersion\" : \"1.0.0\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tool/dependencies : Get tool dependencies
     * Get the dependencies of this tool
     *
     * @return Success (status code 200)
     *         or The specified resource was not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @ApiOperation(value = "Get tool dependencies", nickname = "getToolDependencies", notes = "Get the dependencies of this tool", response = ToolDependencies.class, tags={ "Tool", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ToolDependencies.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class),
        @ApiResponse(code = 500, message = "The request cannot be fulfilled due to an unexpected server error", response = Error.class) })
    @GetMapping(
        value = "/tool/dependencies",
        produces = { "application/json" }
    )
    default ResponseEntity<ToolDependencies> getToolDependencies() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"toolDependencies\" : [ { \"name\" : \"awesome-nlp-tool\", \"version\" : \"1.0.6\", \"license\" : \"apache-2.0\", \"repository\" : \"github:awesome-org/awesome-nlp-tool\", \"description\" : \"An awesome NLP Tool that takes as input X and outputs Y.\", \"author\" : \"Awesome Team\", \"authorEmail\" : \"author@example.com\", \"url\" : \"https://example.com\", \"toolType\" : \"nlpsandbox:date-annotator\", \"toolApiVersion\" : \"1.0.0\" }, { \"name\" : \"awesome-nlp-tool\", \"version\" : \"1.0.6\", \"license\" : \"apache-2.0\", \"repository\" : \"github:awesome-org/awesome-nlp-tool\", \"description\" : \"An awesome NLP Tool that takes as input X and outputs Y.\", \"author\" : \"Awesome Team\", \"authorEmail\" : \"author@example.com\", \"url\" : \"https://example.com\", \"toolType\" : \"nlpsandbox:date-annotator\", \"toolApiVersion\" : \"1.0.0\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
