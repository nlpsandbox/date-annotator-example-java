/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0-beta2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.Service;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.net.URI;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-11-26T14:44:24.992301-08:00[America/Los_Angeles]")
@Validated
@Api(value = "service", description = "the service API")
public interface ServiceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /service : Get service information
     * Get information about the service
     *
     * @return Success (status code 200)
     *         or Unauthorized (status code 403)
     *         or The specified resource was not found (status code 404)
     */
    @ApiOperation(value = "Get service information", nickname = "service", notes = "Get information about the service", response = Service.class, tags={ "Service", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = Service.class),
        @ApiResponse(code = 403, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class) })
    @GetMapping(
        value = "/service",
        produces = { "application/json" }
    )
    default ResponseEntity<Service> service() {
        Service service = new Service()
            .name("date-annotator-example-java")
            .version("0.2.2")
            .license("Apache-2.0")
            .repository("github:nlpsandbox/date-annotator-example-java")
            .description("An example implementation of the NLP Sandbox Date Annotator")
            .author("The NLP Sandbox Team")
            .authorEmail("thomas.schaffter@sagebionetworks.org")
            .url(URI.create("https://github.com/nlpsandbox/date-annotator-example-java"));
        return new ResponseEntity<Service>(service, HttpStatus.OK);

    }

}
